package com.solvd.lab1.lecture2And3.vehicles;

import com.solvd.lab1.lecture2And3.interfaces.IVehicleMaintenance;
import com.solvd.lab1.lecture2And3.interfaces.IVehicleMovement;
import com.solvd.lab1.lecture4.exceptions.InvalidCharacter;
import com.solvd.lab1.lecture4.exceptions.InvalidFormat;
import com.solvd.lab1.lecture4.exceptions.InvalidLicensePlateException;
import com.solvd.lab1.lecture4.exceptions.NegativeSpeedException;
import com.solvd.lab1.lecture4.validationFunctions.Validation;

import java.util.Objects;

public abstract class Vehicle implements IVehicleMovement, IVehicleMaintenance {

    private String licensePlate;
    private String brand;
    private float maxSpeed;
    //Final Attribute
    public final static int  MAX_SPEED_ON_CITY = 60;

    public Vehicle(String licensePlate, String brand, float maxSpeed) throws NegativeSpeedException, InvalidCharacter {

        this.brand = brand;
        //Check if the speed is greater than 0 I throw NegativeSpeedException
        if(maxSpeed < 0)
            throw new NegativeSpeedException();
        else
            this.maxSpeed = maxSpeed;
        //Check if the license plate has invalid characters
        if(Validation.checkInvalidCharacter(licensePlate)) {
            try {
                //Check if the license plate has invalid format
                if(Validation.checkLicensePlateFormat(licensePlate))
                    this.licensePlate = licensePlate;
            } catch (InvalidFormat e) {
                e.getMessage();
            }
        }

    }

    //Getters & Setters
    public String getLicensePlate() {
        return licensePlate;
    }

    public void setLicensePlate(String licensePlate) {
        this.licensePlate = licensePlate;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }


    @Override
    public String toString() {
        return
                "LicensePlate='" + licensePlate + '\'' +
                ", brand='" + brand + '\'' +
                ", speed=" + maxSpeed ;
    }

    /*
    @Override
    public boolean equals(Object o) {
       if(o instanceof Vehicle){
           Vehicle other= (Vehicle) o;
           if(this.licensePlate == other.licensePlate)
               return true;
           else
               return false;
       }else
           return false;
    }*/

    //Autogenerated code
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vehicle vehicle = (Vehicle) o;
        return licensePlate.equals(vehicle.licensePlate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(licensePlate);
    }


    @Override
    public void checkBrakes() {
        System.out.println("The mechanic checked the brakes");
    }

    //Task 3
    //Final method cannot be overridden
    public final void finalMethod(){
        System.out.println("This method cannot be overridden");
    }

    //Static method
    public static void staticMethod(){
        System.out.println("This is a static method");
    }


}
